#!/bin/bash

# June 2021 - Gene Weber
# This script launches Accumulo after running the installation script, and start_hadoop script.
#
# COMMAND LINE OPTION: If this script is launched with the command line option "split"
# it will use the pre-split properties file, else it will use the no-split file.

# Save command line option
COMMAND_OPTION=$1

# Location of existing directory on shared file system of installed software.
INSTALL_DIR=$(cat inst_dir)
# Execute the configuration file to initialize all needed variables.
source acc_test.conf
# Get all needed environmental variables.
source $INSTALL_DIR/acc_env_vars
# Set bashrc flag
touch script_active

# Based on command line option use no-split or pre-split properties file.
if [ "$COMMAND_OPTION" == "split" ]; then
  echo ""
  echo "Setting the properties file to pre-split."
  echo ""
  cp $ACCUMULO_HOME/conf/accumulo.properties.pre-split $ACCUMULO_HOME/conf/accumulo.properties
else
  echo ""
  echo "Setting the properties file to no-split."
  echo ""
  cp $ACCUMULO_HOME/conf/accumulo.properties.no-split $ACCUMULO_HOME/conf/accumulo.properties
fi

# Get Name of first Accumulo Master Node
set -- $ACC_MASTER_NODES
export FIRST_MASTER=$1

# Initialize a new accumulo structure.
echo ""
echo "Initializing a new Accumulo database"
echo ""

# Check if the Accumulo database already exists.
if $(accumulo org.apache.accumulo.server.util.ListInstances 2>/dev/null | grep -q $ACC_DBASE_NAME); then
  # Delete existing entry from Zookeper and re-initialize 
  pdsh -w $FIRST_MASTER "echo -e '$ACC_DBASE_NAME\ny\n$ACC_PASSWD\n$ACC_PASSWD\n' | accumulo init"
else
  # Initialize a new accumulo database
  pdsh -w $FIRST_MASTER "echo -e '$ACC_DBASE_NAME\n$ACC_PASSWD\n$ACC_PASSWD\n' | accumulo init"
fi

echo ""
echo "Starting the Accumulo Monitor"
echo ""

# Start the accumulo monitor
pdsh -w ^$INSTALL_DIR/accmonitornodes 'accumulo-service monitor start'

echo ""
echo "Starting the Accumulo Tablet Servers"
echo ""

# Create tservers launch file
rm $INSTALL_DIR/lnch_tsrvrs 2>/dev/null
touch $INSTALL_DIR/lnch_tsrvrs
chmod 755 $INSTALL_DIR/lnch_tsrvrs
for (( i=1; i<=$TABS_PER_NODE; i++ ))
do
  LOGFILE="/$LOCAL_NVME1/$ACC_LOG_DIR/tserver_${i}.log"
  ERRFILE="/$LOCAL_NVME1/$ACC_LOG_DIR/tserver_${i}.err"
  echo "nohup accumulo tserver >$LOGFILE 2>$ERRFILE < /dev/null &" >> $INSTALL_DIR/lnch_tsrvrs
done
# Copy the launch file to local drive. This is more for AWS where nfs is slow!
pdsh -w ^$INSTALL_DIR/acctservernodes 'cp $INSTALL_DIR/lnch_tsrvrs /$LOCAL_NVME1' 

# Start the accumulo tablet servers.
echo "Launching $TABS_PER_NODE Tablet Servers on each of these nodes:"
echo $ACC_TSERVER_NODES
pdsh -w ^$INSTALL_DIR/acctservernodes 'nohup /$LOCAL_NVME1/lnch_tsrvrs &' &
# Capture start time.
TBLTS_START=$(date +%s)

# Allow some time for all tserver processes to start.
echo "Waiting $TSS_WAIT_TIME seconds for all Tablet Servers to start."
sleep ${TSS_WAIT_TIME}s

# Collect all tserver PIDs
echo "Collecting all Tablet Server PIDs."
PIDFILE="/$LOCAL_NVME1/$A_PID_DIR/tservers.pid"
pdsh -w ^$INSTALL_DIR/acctservernodes "ps -fu $LOGNAME | grep '.* tserver$' | sed 's/^$LOGNAME *//' | sed 's/\ .*$//' >$PIDFILE"

# Verify the Tablet Servers
cat <<EOT > $INSTALL_DIR/tsrv_verify
LONGEST=0
NUM_PIDS=0
for pid in \$(cat $PIDFILE)
do
  ((NUM_PIDS++))
  TEMP1=\$(export TZ=UTC0 LC_ALL=C; date -d "\$(ps -o lstart= \$pid)" +%s)
  TEMP=\$((\$TEMP1 - $TBLTS_START))
  if (( \$TEMP > \$LONGEST )); then
    LONGEST=\$TEMP
  fi
done

if (($TABS_PER_NODE > \$NUM_PIDS)); then
  echo "ERROR! -> Only \$NUM_PIDS of $TABS_PER_NODE Tablet Servers are running!"
else
  echo "All Tablet Servers started within \$LONGEST seconds."
fi
EOT
# Copy file to local drives and launch them.
chmod 755 $INSTALL_DIR/tsrv_verify
pdsh -w ^$INSTALL_DIR/acctservernodes 'cp $INSTALL_DIR/tsrv_verify /$LOCAL_NVME1' 
pdsh -w ^$INSTALL_DIR/acctservernodes '/$LOCAL_NVME1/tsrv_verify' 

# Clean up
rm $INSTALL_DIR/lnch_tsrvrs 2>/dev/null
pdsh -w ^$INSTALL_DIR/acctservernodes 'rm /$LOCAL_NVME1/lnch_tsrvrs 2>/dev/null' 2>/dev/null
rm $INSTALL_DIR/tsrv_verify 2>/dev/null
pdsh -w ^$INSTALL_DIR/acctservernodes 'rm /$LOCAL_NVME1/tsrv_verify 2>/dev/null' 2>/dev/null

echo ""
echo "Starting the Accumulo Masters"
echo ""

# Start the accumulo master
pdsh -w ^$INSTALL_DIR/accmasternodes 'accumulo-service master start'

echo ""
echo "Starting the Accumulo Garbage Collector"
echo ""

# Start the accumulo garbage collector
pdsh -w ^$INSTALL_DIR/accgcnodes 'accumulo-service gc start'

echo ""
echo "Starting the Accumulo Tracer"
echo ""

# Start the accumulo tracer
pdsh -w ^$INSTALL_DIR/acctracernodes 'accumulo-service tracer start'

# If Accumulo Proxy is installed, start it.
if [ $INSTALL_PROXY = true ]; then

  echo ""
  echo "Starting the Accumulo Proxy"
  echo ""

  LOGFILE="/$LOCAL_NVME1/$ACC_LOG_DIR/acc_proxy.log"
  ERRFILE="/$LOCAL_NVME1/$ACC_LOG_DIR/acc_proxy.err"
  PIDFILE="/$LOCAL_NVME1/$A_PID_DIR/acc_proxy.pid"
  pdsh -w ^$INSTALL_DIR/acc_proxy_node "nohup accumulo-proxy -p $ACC_PROXY_HOME/conf/proxy.properties \
                                        >$LOGFILE 2>$ERRFILE < /dev/null &"
  pdsh -w ^$INSTALL_DIR/acc_proxy_node "ps -fu $LOGNAME | grep '.*bin\/accumulo-proxy ' | sed 's/^$LOGNAME *//' |\
                                        sed 's/\ .*$//' >$PIDFILE"
  touch $INSTALL_DIR/acc_proxy_running
fi

# Run a command in the accumulo shell as a simple test.
cat <<EOT | accumulo shell -u root
tables
bye
EOT

if [ "$AWS" = true ]; then
  PROXY=$(cat $INSTALL_DIR/accmonitornodes | sed 's/^/ip-/' | sed 's/\./-/g' | sed 's/$/\.evoforge\.org/')
else
  PROXY=$(cat $INSTALL_DIR/accmonitornodes)
fi
echo ""
echo "You can view Accumulo monitor page at:"
echo "http://$PROXY:9995/monitor"
echo ""

echo ""
echo "If this looked successful you can now run accumulo tests."
echo "The stop_accumulo script will terminate accumulo processes and clean up."
echo ""
echo "NOTE: TO RUN ACCUMULO COMMANDS FROM THE COMMAND LINE YOU MUST FIRST:"
echo "source acc_test.conf"
echo "source \$INSTALL_DIR/acc_env_vars"
echo ""

rm acc_stopped_flag 2>/dev/null  # Clear flag that accumulo has been stopped

rm script_active
