#!/bin/bash

# June 2021 - Gene Weber
# This script launches Accumulo after running the installation script, and start_hadoop script.
#
# COMMAND LINE OPTION: If this script is launched with the command line option "split"
# it will use the pre-split properties file, else it will use the no-split file.

# Save command line option
COMMAND_OPTION=$1

# Location of existing directory on shared file system of installed software.
INSTALL_DIR=$(cat inst_dir)
# Execute the configuration file to initialize all needed variables.
source acc_test.conf
# Get all needed environmental variables.
source $INSTALL_DIR/acc_env_vars
# Set bashrc flag
touch script_active

# Based on command line option use no-split or pre-split properties file.
if [ "$COMMAND_OPTION" == "split" ]; then
  echo ""
  echo "Setting the properties file to pre-split."
  echo ""
  cp $ACCUMULO_HOME/conf/accumulo.properties.pre-split $ACCUMULO_HOME/conf/accumulo.properties
else
  echo ""
  echo "Setting the properties file to no-split."
  echo ""
  cp $ACCUMULO_HOME/conf/accumulo.properties.no-split $ACCUMULO_HOME/conf/accumulo.properties
fi

# Get Name of first Accumulo Master Node
set -- $ACC_MASTER_NODES
export FIRST_MASTER=$1

# Initialize a new accumulo structure.
echo ""
echo "Initializing a new Accumulo database"
echo ""

# Check if the Accumulo database already exists.
if $(accumulo org.apache.accumulo.server.util.ListInstances 2>/dev/null | grep -q $ACC_DBASE_NAME); then
  # Delete existing entry from Zookeper and re-initialize 
  pdsh -w $FIRST_MASTER "echo -e '$ACC_DBASE_NAME\ny\n$ACC_PASSWD\n$ACC_PASSWD\n' | accumulo init"
else
  # Initialize a new accumulo database
  pdsh -w $FIRST_MASTER "echo -e '$ACC_DBASE_NAME\n$ACC_PASSWD\n$ACC_PASSWD\n' | accumulo init"
fi

echo ""
echo "Starting the Accumulo Monitor"
echo ""

# Start the accumulo monitor
pdsh -w ^$INSTALL_DIR/accmonitornodes 'accumulo-service monitor start'

echo ""
echo "Starting the Accumulo Tablet Servers"
echo ""

# Start the accumulo tablet servers
# Play a game with accumulo-env.sh to make every tserver on a node have a unique ProcessName in the metrics file.
# See: https://github.com/apache/accumulo/issues/1337
cp -n $ACCUMULO_CONF_DIR/accumulo-env.sh $ACCUMULO_CONF_DIR/X_accumulo-env.sh
for node in $ACC_TSERVER_NODES
do
  for (( i=1; i<=$TABS_PER_NODE; i++ ))
  do
    echo "Starting tserver-${i} on $node"
    LOGFILE="/$LOCAL_NVME1/$ACC_LOG_DIR/tserver_${node}_${i}.log"
    ERRFILE="/$LOCAL_NVME1/$ACC_LOG_DIR/tserver_${node}_${i}.err"
    # Temporarily add two lines to the end of accumulo-env.sh modifying the JAVA_OPTS variable.
    # echo "JAVA_OPTS=(\"\${JAVA_OPTS[@]}\" \"-Daccumulo.metrics.service.instance=$i\")" >> $ACCUMULO_CONF_DIR/accumulo-env.sh
    # echo "export JAVA_OPTS" >> $ACCUMULO_CONF_DIR/accumulo-env.sh
    # Need to wait till tserver starts before restoring accumulo-env.sh
    # Capture the current number of tserver processes running on the node. Wait until the new one is
    # also running, or until a watchdog timer indicates it didn't start.
    INIT_PROCS=$(pdsh -w $node "ps -fu $LOGNAME | grep '.* tserver$' | wc -l" | awk '{print $2}')
    NUM_PROCS=$INIT_PROCS; WATCHDOG=0
    pdsh -w $node "nohup accumulo tserver >$LOGFILE 2>$ERRFILE < /dev/null &"
    while [ $INIT_PROCS -eq $NUM_PROCS ]
    do
      NUM_PROCS=$(pdsh -w $node "ps -fu $LOGNAME | grep '.* tserver$' | wc -l" | awk '{print $2}')
      ((WATCHDOG++))
      if [ $WATCHDOG -ge 100 ]; then
        NUM_PROCS=999
        echo "tserver did not start."
      fi
    done
    # Now that tserver process has started (hopefully) restore the accumulo-env.sh file.
    # cp $ACCUMULO_CONF_DIR/X_accumulo-env.sh $ACCUMULO_CONF_DIR/accumulo-env.sh
  done
done
# "Permanently" restore the file now that loop is complete.
mv $ACCUMULO_CONF_DIR/X_accumulo-env.sh $ACCUMULO_CONF_DIR/accumulo-env.sh
# Separate loop gives processes some time to startup
PIDFILE="/$LOCAL_NVME1/$A_PID_DIR/tservers.pid"
for node in $ACC_TSERVER_NODES
do
  pdsh -w $node "ps -fu $LOGNAME | grep '.* tserver$' | sed 's/^$LOGNAME *//' | sed 's/\ .*$//' >$PIDFILE"
done

echo ""
echo "Starting the Accumulo Masters"
echo ""

# Start the accumulo master
pdsh -w ^$INSTALL_DIR/accmasternodes 'accumulo-service master start'

echo ""
echo "Starting the Accumulo Garbage Collector"
echo ""

# Start the accumulo garbage collector
pdsh -w ^$INSTALL_DIR/accgcnodes 'accumulo-service gc start'

echo ""
echo "Starting the Accumulo Tracer"
echo ""

# Start the accumulo tracer
pdsh -w ^$INSTALL_DIR/acctracernodes 'accumulo-service tracer start'

# If Accumulo Proxy is installed, start it.
if [ $INSTALL_PROXY = true ]; then

  echo ""
  echo "Starting the Accumulo Proxy"
  echo ""

  LOGFILE="/$LOCAL_NVME1/$ACC_LOG_DIR/acc_proxy.log"
  ERRFILE="/$LOCAL_NVME1/$ACC_LOG_DIR/acc_proxy.err"
  PIDFILE="/$LOCAL_NVME1/$A_PID_DIR/acc_proxy.pid"
  pdsh -w ^$INSTALL_DIR/acc_proxy_node "nohup accumulo-proxy -p $ACC_PROXY_HOME/conf/proxy.properties \
                                        >$LOGFILE 2>$ERRFILE < /dev/null &"
  pdsh -w ^$INSTALL_DIR/acc_proxy_node "ps -fu $LOGNAME | grep '.*bin\/accumulo-proxy ' | sed 's/^$LOGNAME *//' |\
                                        sed 's/\ .*$//' >$PIDFILE"
fi

# Run a command in the accumulo shell as a simple test.
cat <<EOT | accumulo shell -u root
tables
bye
EOT

if [ "$AWS" = true ]; then
  PROXY=$(cat $INSTALL_DIR/accmonitornodes | sed 's/^/ip-/' | sed 's/\./-/g' | sed 's/$/\.evoforge\.org/')
else
  PROXY=$(cat $INSTALL_DIR/accmonitornodes)
fi
echo ""
echo "You can view Accumulo monitor page at:"
echo "http://$PROXY:9995/monitor"
echo ""

echo ""
echo "If this looked successful you can now run the accumulo_tests script."
echo "The stop_accumulo script will terminate accumulo processes and clean up."
echo ""
echo "NOTE: TO RUN ACCUMULO COMMANDS FROM THE COMMAND LINE YOU MUST FIRST:"
echo "source acc_test.conf"
echo "source \$INSTALL_DIR/acc_env_vars"
echo ""

rm acc_stopped_flag 2>/dev/null  # Clear flag that accumulo has been stopped

rm script_active
